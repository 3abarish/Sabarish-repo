name:Sabarish G
ID:ACE12440
Topic:Oops concept 





// Encapsulation: Using private fields and public getters/setters

class Person {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void displayInfo() {
        System.out.println("Name: " + name + ", Age: " + age);
    }
}

// Inheritance: Employee inherits from Person


class Employee extends Person {
    private String jobTitle;

    public Employee(String name, int age, String jobTitle) {
        super(name, age);
        this.jobTitle = jobTitle;
    }

    public String getJobTitle() {
        return jobTitle;
    }

    public void setJobTitle(String jobTitle) {
        this.jobTitle = jobTitle;
    }

    // Polymorphism: Overriding the displayInfo method
    @Override
    public void displayInfo() {
        super.displayInfo();
        System.out.println("Job Title: " + jobTitle);
    }
}

// Abstraction: Abstract class with abstract method
abstract class Animal {
    public abstract void makeSound();

    public void sleep() {
        System.out.println("Sleeping...");
    }
}

// Concrete class Dog extends Animal
class Dog extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Bark");
    }
}

public class Main {
    public static void main(String[] args) {
        // Creating objects and demonstrating encapsulation
        Person person = new Person("Alice", 30);
        person.displayInfo();

        // Demonstrating inheritance and polymorphism
        Employee employee = new Employee("Bob", 25, "Developer");
        employee.displayInfo();

        // Demonstrating abstraction
        Animal dog = new Dog();
        dog.makeSound();
        dog.sleep();
    }
}